Pipistrellus_nathusii     = 10
)
# 3) Append the new rows to the existing data frame
final_df_plus_all <- bind_rows(final_df_plus_LQ, MaxLifespan_row, Weight_row)
# 4) Inspect the new data set
final_df_plus_all
long_data <- final_df_plus_LQ %>%
pivot_longer(
cols = -Protein,            # Everything except the 'Protein' column
names_to = "Species",       # The column names become a "Species" variable
values_to = "value"         # The cell contents go into "value"
)
# Step B: Pivot wider so that each Protein becomes a column
# We only do this if we specifically want each "Protein" or trait to be in a column.
wide_data <- long_data %>%
pivot_wider(
names_from = Protein,   # e.g. "NP_004322.1", "P52815.2", "LQ", ...
values_from = value
)
# wide_data now has columns:
# Species, NP_004322.1, P52815.2, LQ, (plus Maximum_Lifespan, Weight, etc. if present).
# Each row is a species.
# Let's view it:
wide_data$Hibernation <- c(1, 0, 0, 0, 0, 0, 0, 0, 0,0,0,1,1,1,1,0,0)
wide_data
#VERSION WITHOUT MYOTIS BRANDTII | comment if does not work out
#wide_data = wide_data[-12, ]
wide_data
library(ape)
# Load or create your phylogeny with matching tip labels
myPhylogeny <- read.tree("bat_tags_noen.nwk")
# (Optional) Inspect tip labels
myPhylogeny$tip.label
library(caper)
comp_dat <- comparative.data(
phy = myPhylogeny,
data = as.data.frame(wide_data),  # wide_data must be a data.frame (not just tibble)
names.col = "Species",           # which column has species names?
vcv = TRUE,                      # whether to store the varianceâ€“covariance matrix
warn.dropped = TRUE             # whether to warn if some species are dropped
)
comp_dat$phy$tip.label
comp_dat$data$Species
'''model_pgls <- pgls(
#formula = LQ ~ NP_004322.1 + P52815.2+NP_478054.2 + Q99836.1 + P47985.2+ Q9BY49.2 + Q9NQL2.1 +P15692.3 +P49023.3 + Q9UN79.3 + P09017.2 + P17023.4 +Q9Y6J9.1 + Q3B726.1 +  Q6ZMU5.2 + Q8N6M9.2 + Q9BT67.1 +Q16763.2 + WHV00477.1 +O14649.1 + P07332.3 + P28223.2 +Q02641.3 + P18074.1 + P47974.3 + P56704.2 + Q8N474.1 + Q06945.1 + Q13485.1 + Q9H9B1.4,  # Y ~ X1 + X2
formula = LQ ~ NP_004322.1 + P52815.2+NP_478054.2 + Q99836.1 + P47985.2+ Q9BY49.2 + Q9NQL2.1 +P15692.3 +P49023.3 + Q9UN79.3 + P09017.2 + P17023.4 +Q9Y6J9.1 + Q3B726.1 +  Q6ZMU5.2 + Q8N6M9.2 + Q9BT67.1 +Q16763.2 + WHV00477.1 +O14649.1 + P07332.3 + P28223.2 +Q02641.3 + P18074.1 + P47974.3 + P56704.2 + Q8N474.1 + Q06945.1 + Q13485.1 + Q9H9B1.4 + P04141.1 + P49589.3 + Q8N1S5.3+ Q9H7L2.2 + NP_068767.3 + NP_597725.1 + NP_940978.2 + NP_001036009.1 + O14653.2 + O14734.1 + P20338.3 + Q9UBP6.1 + Q96HD9.1 + Q92536.3 ,  # Y ~ X1 + X2
data = comp_dat
) '''
sigonly_pgls <- pgls(
formula = LQ ~ P56704.2 + P09017.2 + Q3B726.1 + Q6ZMU5.2 + Q9BT67.1 + P15692.3 + Q9Y6J9.1 + Q99836.1 + NP_004322.1 + Q9H9B1.4,
data = comp_dat
)
summary(sigonly_pgls)
sigonly1_pgls <- pgls(
formula = LQ ~ P56704.2 + Q3B726.1 + Q9BT67.1 + P15692.3 + Q9Y6J9.1 + NP_004322.1 + Q9H9B1.4,
data = comp_dat
)
summary(sigonly1_pgls)
library(lmtest)
bptest(sigonly1_pgls)
sigtru_pgls <- pgls(
formula = LQ ~ P56704.2 + P09017.2 + Q99836.1 + NP_004322.1 + Q9H9B1.4 ,
data = comp_dat
)
summary(sigtru_pgls)
head(wide_data)
# Remove non-numeric columns (like Species)
# Option 1: Create a data frame with all numeric columns
numeric_data <- wide_data[, sapply(wide_data, is.numeric)]
# Option 2: Exclude the target variable "LQ" if you only want the predictors
predictor_data <- numeric_data[, !names(numeric_data) %in% "LQ"]
# Compute the correlation matrix for the predictors
cor_mat <- cor(predictor_data, use = "pairwise.complete.obs")
#install.packages("corrplot")
library(corrplot)
# Visualize the correlation matrix as a heatmap with corrplot
corrplot(cor_mat, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
threshold <- 0.75
# Find indices where the absolute correlation is greater than the threshold.
# We use 'which' with arr.ind = TRUE and then filter out duplicate pairs (only consider upper triangle)
high_cor_indices <- which(abs(cor_mat) > threshold, arr.ind = TRUE)
high_cor_indices <- high_cor_indices[high_cor_indices[,1] < high_cor_indices[,2], ]
# Create a data frame with the gene pairs and their correlation values
gene_pairs <- data.frame(
Gene1 = rownames(cor_mat)[high_cor_indices[,1]],
Gene2 = colnames(cor_mat)[high_cor_indices[,2]],
Correlation = cor_mat[high_cor_indices]
)
# Print the result
print(gene_pairs)
#summary(model_pgls)
# LQ ~ NP_004322.1
model1 <- pgls(LQ ~ NP_004322.1, data = comp_dat)
summary(model1)
bptest(model1)
# LQ ~ P52815.2
model2 <- pgls(LQ ~ P52815.2, data = comp_dat)
summary(model2)
bptest(model2)
model3 <- pgls(LQ ~ NP_478054.2, data = comp_dat)
summary(model3)
model4 <- pgls(LQ ~ Q99836.1, data = comp_dat)
summary(model4)
bptest(model4)
model5 <- pgls(LQ ~ P47985.2, data = comp_dat)
summary(model5)
model6 <- pgls(LQ ~ Q9BY49.2, data = comp_dat)
summary(model6)
model7 <- pgls(LQ ~ Q9NQL2.1, data = comp_dat)
summary(model7)
model8 <- pgls(LQ ~ P15692.3, data = comp_dat)
summary(model8)
library(lmtest)
bptest(model8)
model9 <- pgls(LQ ~ P49023.3, data = comp_dat)
summary(model9)
model10 <- pgls(LQ ~ Q9UN79.3, data = comp_dat)
summary(model10)
model11 <- pgls(LQ ~ P09017.2, data = comp_dat)
summary(model11)
model12 <- pgls(LQ ~ P17023.4, data = comp_dat)
summary(model12)
model13 <- pgls(LQ ~ Q9Y6J9.1, data = comp_dat)
summary(model13)
bptest(model13)
model14 <- pgls(LQ ~ Q3B726.1, data = comp_dat)
summary(model14)
bptest(model14)
model15 <- pgls(LQ ~ Q6ZMU5.2, data = comp_dat)
summary(model15)
bptest(model15)
model16 <- pgls(LQ ~ Q8N6M9.2, data = comp_dat)
summary(model16)
model17 <- pgls(LQ ~ Q9BT67.1, data = comp_dat)
summary(model17)
bptest(model17)
model18 <- pgls(LQ ~ Q16763.2, data = comp_dat)
summary(model18)
model19 <- pgls(LQ ~ WHV00477.1, data = comp_dat)
summary(model19)
model20 <- pgls(LQ ~ O14649.1, data = comp_dat)
summary(model20)
model21 <- pgls(LQ ~ P07332.3, data = comp_dat)
summary(model21)
model22 <- pgls(LQ ~ P28223.2, data = comp_dat)
summary(model22)
model23 <- pgls(LQ ~ Q02641.3, data = comp_dat)
summary(model23)
model24 <- pgls(LQ ~ P18074.1, data = comp_dat)
summary(model24)
model25 <- pgls(LQ ~ P47974.3, data = comp_dat)
summary(model25)
model26 <- pgls(LQ ~ P56704.2, data = comp_dat)
summary(model26)
bptest(model26)
model27 <- pgls(LQ ~ Q8N474.1, data = comp_dat)
summary(model27)
model28 <- pgls(LQ ~ Q06945.1, data = comp_dat)
summary(model28)
model29 <- pgls(LQ ~ Q13485.1, data = comp_dat)
summary(model29)
model30 <- pgls(LQ ~ Q9H9B1.4, data = comp_dat)
summary(model30)
bptest(model30)
model31 <- pgls(LQ ~ P04141.1, data = comp_dat)
summary(model31)
model32 <- pgls(LQ ~ P49589.3, data = comp_dat)
summary(model32)
model33 <- pgls(LQ ~ Q8N1S5.3, data = comp_dat)
summary(model33)
#model34 <- pgls(LQ ~ Q9H7L2.2, data = comp_dat)
#summary(model34)
model35 <- pgls(LQ ~ NP_068767.3, data = comp_dat)
summary(model35)
model36 <- pgls(LQ ~ NP_597725.1, data = comp_dat)
summary(model36)
model37 <- pgls(LQ ~ NP_940978.2, data = comp_dat)
summary(model37)
bptest(model37)
model38 <- pgls(LQ ~ NP_001036009.1, data = comp_dat)
summary(model38)
model39 <- pgls(LQ ~ O14653.2, data = comp_dat)
summary(model39)
bptest(model39)
model40 <- pgls(LQ ~ O14734.1, data = comp_dat)
summary(model40)
model41 <- pgls(LQ ~ P20338.3, data = comp_dat)
summary(model41)
model42 <- pgls(LQ ~ Q9UBP6.1, data = comp_dat)
summary(model42)
model43 <- pgls(LQ ~ Q96HD9.1, data = comp_dat)
summary(model43)
model44 <- pgls(LQ ~ Q92536.3, data = comp_dat)
summary(model44)
modeln <- pgls(LQ ~ NP_000884.1, data = comp_dat)
summary(modeln)
modeln1 <- pgls(LQ ~ NP_002209.2, data = comp_dat)
summary(modeln1)
library(lmtest)
modelSIGWOBR <- pgls(LQ ~ NP_000884.1 + NP_068767.3 +Q96HD9.1 + Q9H9B1.4, data = comp_dat)
summary(modelSIGWOBR)
bptest(modelSIGWOBR)
modelsigonly <- pgls(LQ ~ P56704.2 + NP_001165095.1 + XP_005248023.1+ P09017.2 + P15692.3 + NP_149122.1 + NP_004322.1 + NP_000884.1 + NP_068767.3 + Q9H9B1.4 + NP_940978.2 + NP_001519.1 + NP_003367.4 , data = comp_dat)
modelecmonly <- pgls(LQ ~ NP_940978.2 +NP_002209.2 + NP_068767.3 + NP_000884.1 + P56704.2 + NP_001165095.1 + XP_005248023.1 , data = comp_dat)
summary(modelecmonly)
bptest(modelecmonly)
modelecmonly <- pgls(LQ ~ Hibernation + NP_940978.2 +NP_002209.2 + NP_068767.3 + NP_000884.1 , data = comp_dat)
summary(modelecmonly)
bptest(modelecmonly)
protein_ids <- c(
"NP_000749.2", "NP_001519.1", "NP_002695.1", "NP_003003.3", "NP_003367.4",
"NP_055253.2", "NP_055255.1", "NP_079484.1", "NP_148983.1", "NP_149122.1",
"NP_149126.1", "NP_665905.2", "NP_775270.1", "NP_775296.1", "NP_775297.1",
"NP_001020538.2", "NP_001020539.2", "NP_001165095.1",
"NP_001257920.1", "NP_001257922.1", "XP_005248023.1", "XP_005263696.1",
"NP_000884.1", "NP_002209.2", "NP_003108.2"
)
# Generate models dynamically
for (i in seq_along(protein_ids)) {
model_name <- paste0("model", i + 44)  # starting from model45
formula <- as.formula(paste0("LQ ~ `", protein_ids[i], "`"))
assign(model_name, pgls(formula, data = comp_dat))
print(model_name)
print(summary(get(model_name)))
}
summary(model46)
bptest(model46)
summary(model49)
bptest(model49)
summary(model54)
bptest(model54)
summary(model62)
bptest(model62)
summary(model61)
bptest(model61)
summary(model65)
bptest(model65)
summary(model39) #membrin
bptest(model39)
summary(model43)
bptest(model43)
significant <- c(1, 8, 9, 11, 29, 30, 35, 37, 46, 49, 54, 62, 65, 67)
#without brandtii 30 (marg sig), 35, 67
marginally_significant <-c( 4, 13, 14, 15, 17, 39, 43, 61, 68 )
#without brandtii 43 (sig)
#install.packages('lmtest')
library(lmtest)
bptest(model35)
bptest(modeln)
bptest(modeln1)
#model <- lm(y ~ x1 + x2, data = your_data)
for (i in significant){
model_name <- paste0('model',i)
model_obj <- get(model_name)
print(model_name)
print(summary(model_obj))
print(bptest(model_obj))
}
for (i in marginally_significant){
model_name <- paste0('model',i)
model_obj <- get(model_name)
print(model_name)
print(summary(model_obj))
print(bptest(model_obj))
}
#install.packages('ggplot2')
library(ggplot2)
wide_data_df <- as.data.frame(wide_data)
# Make the comparative data backup just in case
comp_dat <- comparative.data(
phy = myPhylogeny,
data = wide_data_df,
names.col = "Species",
vcv = TRUE,
warn.dropped = TRUE
)
wide_data_df$pred_model_1 <- predict(model1, newdata = wide_data_df)
wide_data_df$pred_model_2 <- predict(model2, newdata = wide_data_df)
wide_data_df$pred_model_3 <- predict(model3, newdata = wide_data_df)
wide_data_df$pred_model_4 <- predict(model4, newdata = wide_data_df)
wide_data_df$pred_model_8 <- predict(model8, newdata = wide_data_df)
wide_data_df$pred_model_11 <- predict(model11, newdata = wide_data_df)
wide_data_df$pred_model_13 <- predict(model13, newdata = wide_data_df)
wide_data_df$pred_model_14 <- predict(model14, newdata = wide_data_df)
wide_data_df$pred_model_15 <- predict(model15, newdata = wide_data_df)
wide_data_df$pred_model_17 <- predict(model17, newdata = wide_data_df)
wide_data_df$pred_model_26 <- predict(model26, newdata = wide_data_df)
wide_data_df$pred_model_30 <- predict(model30, newdata = wide_data_df)
wide_data_df$pred_model_31 <- predict(model31, newdata = wide_data_df)
wide_data_df$pred_model_35 <- predict(model35, newdata = wide_data_df)
wide_data_df$pred_model_37 <- predict(model37, newdata = wide_data_df)
wide_data_df$pred_model_38 <- predict(model38, newdata = wide_data_df)
wide_data_df$pred_model_39 <- predict(model39, newdata = wide_data_df)
wide_data_df$pred_model_43 <- predict(model43, newdata = wide_data_df)
wide_data_df$pred_model_46 <- predict(model46, newdata = wide_data_df)
wide_data_df$pred_model_49 <- predict(model49, newdata = wide_data_df)
wide_data_df$pred_model_54 <- predict(model54, newdata = wide_data_df)
wide_data_df$pred_model_62 <- predict(model62, newdata = wide_data_df)
wide_data_df$pred_model_61 <- predict(model61, newdata = wide_data_df)
wide_data_df$pred_model_65 <- predict(model65, newdata = wide_data_df)
wide_data_df$pred_model_67 <- predict(model67, newdata = wide_data_df)
wide_data_df$pred_model_68 <- predict(model68, newdata = wide_data_df)
wide_data_df$pred_model_ecm <- predict(modelecmonly, newdata = wide_data_df)
wide_data_df$pred_model_sig <- predict(sigonly1_pgls, newdata = wide_data_df)
# leave one out cross val
library(caper)
# Extract species names
species_list <- wide_data_df$Species
n_species <- length(species_list)
n_predictors <- 7  # Number of predictors in the model
results_df <- data.frame(
Species = character(n_species),
Absolute_Error = numeric(n_species),
Test_R2 = numeric(n_species),
Train_R2 = numeric(n_species),
Adjusted_Train_R2 = numeric(n_species),
Log_Loss = numeric(n_species),
stringsAsFactors = FALSE
)
# Run LOOCV
for (i in 1:n_species) {
# Exclude one species for validation
train_data <- wide_data_df[-i, ]
test_data <- wide_data_df[i, , drop = FALSE]
# Prepare the training data for PGLS
comp_dat_train <- comparative.data(
phy = myPhylogeny,
data = train_data,
names.col = "Species",
vcv = TRUE,
warn.dropped = TRUE
)
# Fit the PGLS model
pgls_model <- pgls(
formula = LQ ~ P56704.2 + Q3B726.1 + Q9BT67.1 + P15692.3 + Q9Y6J9.1 + NP_004322.1 + Q9H9B1.4,
data = comp_dat_train
)
# Predict for the left-out species
pred_test <- predict(pgls_model, newdata = test_data)
# Predict for the training species
pred_train <- predict(pgls_model, newdata = train_data)
# Calculate MAE for the test species
mae <- abs(test_data$LQ - pred_test)
# Calculate R^2 for the test species
actual_test <- test_data$LQ
mean_actual_test <- mean(train_data$LQ)
ss_total_test <- sum((actual_test - mean_actual_test)^2)
ss_residual_test <- sum((actual_test - pred_test)^2)
r_squared_test <- 1 - (ss_residual_test / ss_total_test)
# Calculate R^2 for the training species
actual_train <- train_data$LQ
mean_actual_train <- mean(actual_train)
ss_total_train <- sum((actual_train - mean_actual_train)^2)
ss_residual_train <- sum((actual_train - pred_train)^2)
r_squared_train <- 1 - (ss_residual_train / ss_total_train)
# Calculate Adjusted R^2 for the training species
n_train <- nrow(train_data)
adj_r_squared_train <- 1 - ( (1 - r_squared_train) * (n_train - 1) / (n_train - n_predictors - 1) )
# Calculate log-loss (assuming normal distribution)
epsilon <- 1e-15  # small value to avoid log(0)
log_loss <- -sum(log(pmax(epsilon, dnorm(actual_test, mean = pred_test, sd = sd(train_data$LQ)))))
# Store the results
results_df[i, ] <- c(
as.character(test_data$Species),
mae,
r_squared_test,
r_squared_train,
adj_r_squared_train,
log_loss
)
}
# Display the results
library(knitr)
kable(results_df, format = "markdown")
kable(results1_df, format="markdown")
filtered_results_df <- results_df[
!(results_df$Species %in% c("Myotis_brandtii", "Molossus_molossus")),
c("Species", "Absolute_Error", "Adjusted_Train_R2")
]
rownames(filtered_results_df) <- NULL
kable(filtered_results_df, format="markdown")
filtered_results_df$Adjusted_Train_R2 <- as.numeric(filtered_results_df$Adjusted_Train_R2)
filtered_results_df$Absolute_Error <- as.numeric(filtered_results_df$Absolute_Error)
mean(filtered_results_df$Absolute_Error)
summary(filtered_results_df)
modelecmonly <- pgls(LQ ~ NP_940978.2 +NP_002209.2 + NP_068767.3 + NP_000884.1 + P56704.2 + NP_001165095.1 + XP_005248023.1 , data = comp_dat)
summary(modelecmonly)
modelecmonly <- pgls(LQ ~ Hibernation + NP_940978.2 +NP_002209.2 + NP_068767.3 + NP_000884.1 , data = comp_dat)
summary(modelecmonly)
modelecmonly <- pgls(LQ ~ NP_940978.2 +NP_002209.2 + NP_068767.3 + NP_000884.1 , data = comp_dat)
summary(modelecmonly)
modelecmonly <- pgls(LQ ~ NP_940978.2 +NP_002209.2 + NP_068767.3 + NP_000884.1 + P56704.2 + NP_001165095.1 + XP_005248023.1 , data = comp_dat)
summary(modelecmonly)
modelecmonly <- pgls(LQ ~ Hibernation + NP_940978.2 +NP_002209.2 + NP_068767.3 + NP_000884.1 + P56704.2 , data = comp_dat)
summary(modelecmonly)
modelecmonly <- pgls(LQ ~  NP_940978.2 +NP_002209.2 + NP_068767.3 + NP_000884.1 + P56704.2 , data = comp_dat)
summary(modelecmonly)
#VERSION WITHOUT MYOTIS BRANDTII | comment if does not work out
wide_data = wide_data[-12, ]
wide_data
library(ape)
# Load or create your phylogeny with matching tip labels
myPhylogeny <- read.tree("bat_tags_noen.nwk")
# (Optional) Inspect tip labels
myPhylogeny$tip.label
library(caper)
comp_dat <- comparative.data(
phy = myPhylogeny,
data = as.data.frame(wide_data),  # wide_data must be a data.frame (not just tibble)
names.col = "Species",           # which column has species names?
vcv = TRUE,                      # whether to store the varianceâ€“covariance matrix
warn.dropped = TRUE             # whether to warn if some species are dropped
)
comp_dat$phy$tip.label
comp_dat$data$Species
'''model_pgls <- pgls(
#formula = LQ ~ NP_004322.1 + P52815.2+NP_478054.2 + Q99836.1 + P47985.2+ Q9BY49.2 + Q9NQL2.1 +P15692.3 +P49023.3 + Q9UN79.3 + P09017.2 + P17023.4 +Q9Y6J9.1 + Q3B726.1 +  Q6ZMU5.2 + Q8N6M9.2 + Q9BT67.1 +Q16763.2 + WHV00477.1 +O14649.1 + P07332.3 + P28223.2 +Q02641.3 + P18074.1 + P47974.3 + P56704.2 + Q8N474.1 + Q06945.1 + Q13485.1 + Q9H9B1.4,  # Y ~ X1 + X2
formula = LQ ~ NP_004322.1 + P52815.2+NP_478054.2 + Q99836.1 + P47985.2+ Q9BY49.2 + Q9NQL2.1 +P15692.3 +P49023.3 + Q9UN79.3 + P09017.2 + P17023.4 +Q9Y6J9.1 + Q3B726.1 +  Q6ZMU5.2 + Q8N6M9.2 + Q9BT67.1 +Q16763.2 + WHV00477.1 +O14649.1 + P07332.3 + P28223.2 +Q02641.3 + P18074.1 + P47974.3 + P56704.2 + Q8N474.1 + Q06945.1 + Q13485.1 + Q9H9B1.4 + P04141.1 + P49589.3 + Q8N1S5.3+ Q9H7L2.2 + NP_068767.3 + NP_597725.1 + NP_940978.2 + NP_001036009.1 + O14653.2 + O14734.1 + P20338.3 + Q9UBP6.1 + Q96HD9.1 + Q92536.3 ,  # Y ~ X1 + X2
data = comp_dat
) '''
sigonly_pgls <- pgls(
formula = LQ ~ P56704.2 + P09017.2 + Q3B726.1 + Q6ZMU5.2 + Q9BT67.1 + P15692.3 + Q9Y6J9.1 + Q99836.1 + NP_004322.1 + Q9H9B1.4,
data = comp_dat
)
summary(sigonly_pgls)
sigonly1_pgls <- pgls(
formula = LQ ~ P56704.2 + Q3B726.1 + Q9BT67.1 + P15692.3 + Q9Y6J9.1 + NP_004322.1 + Q9H9B1.4,
data = comp_dat
)
summary(sigonly1_pgls)
library(lmtest)
bptest(sigonly1_pgls)
sigtru_pgls <- pgls(
formula = LQ ~ P56704.2 + P09017.2 + Q99836.1 + NP_004322.1 + Q9H9B1.4 ,
data = comp_dat
)
summary(sigtru_pgls)
head(wide_data)
# Remove non-numeric columns (like Species)
# Option 1: Create a data frame with all numeric columns
numeric_data <- wide_data[, sapply(wide_data, is.numeric)]
# Option 2: Exclude the target variable "LQ" if you only want the predictors
predictor_data <- numeric_data[, !names(numeric_data) %in% "LQ"]
# Compute the correlation matrix for the predictors
cor_mat <- cor(predictor_data, use = "pairwise.complete.obs")
#install.packages("corrplot")
library(corrplot)
# Visualize the correlation matrix as a heatmap with corrplot
corrplot(cor_mat, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
threshold <- 0.75
# Find indices where the absolute correlation is greater than the threshold.
# We use 'which' with arr.ind = TRUE and then filter out duplicate pairs (only consider upper triangle)
high_cor_indices <- which(abs(cor_mat) > threshold, arr.ind = TRUE)
high_cor_indices <- high_cor_indices[high_cor_indices[,1] < high_cor_indices[,2], ]
# Create a data frame with the gene pairs and their correlation values
gene_pairs <- data.frame(
Gene1 = rownames(cor_mat)[high_cor_indices[,1]],
Gene2 = colnames(cor_mat)[high_cor_indices[,2]],
Correlation = cor_mat[high_cor_indices]
)
# Print the result
print(gene_pairs)
#summary(model_pgls)
# LQ ~ NP_004322.1
model1 <- pgls(LQ ~ NP_004322.1, data = comp_dat)
summary(model1)
bptest(model1)
modelecmonly <- pgls(LQ ~ NP_940978.2 +NP_002209.2 + NP_068767.3 + NP_000884.1 + P56704.2 + NP_001165095.1 + XP_005248023.1 , data = comp_dat)
summary(modelecmonly)
modelecmonly <- pgls(LQ ~  NP_940978.2 +NP_002209.2 + NP_068767.3 + NP_000884.1 , data = comp_dat)
summary(modelecmonly)
#install.packages('ggplot2')
library(ggplot2)
wide_data_df <- as.data.frame(wide_data)
# Make the comparative data backup just in case
comp_dat <- comparative.data(
phy = myPhylogeny,
data = wide_data_df,
names.col = "Species",
vcv = TRUE,
warn.dropped = TRUE
)
wide_data_df$pred_model_1 <- predict(model1, newdata = wide_data_df)
wide_data_df$pred_model_ecm <- predict(modelecmonly, newdata = wide_data_df)
ggplot(wide_data_df, aes(x = pred_model_ecm, y = LQ)) +
geom_point(color = "darkred") +
geom_line(aes(y = pred_model_ecm), color = "blue", size = 1) +
geom_text(aes(label = Species), vjust = -0.5, hjust = 0.5, size =3) +
scale_x_continuous(expand = expansion(mult = 0.1)) +
labs(
title = "PGLS: LQ ~ ECM only",
x = "Predicted LQ",
y = "LQ"
) +
theme_minimal() + coord_cartesian(clip = "off")
summary(modelecmonly)
modelecmonly <- pgls(LQ ~ NP_940978.2 +NP_002209.2 + NP_068767.3 + NP_000884.1 + P56704.2 + NP_001165095.1 + XP_005248023.1 , data = comp_dat)
summary(modelecmonly)
wide_data_df$pred_model_ecm <- predict(modelecmonly, newdata = wide_data_df)
ggplot(wide_data_df, aes(x = pred_model_ecm, y = LQ)) +
geom_point(color = "darkred") +
geom_line(aes(y = pred_model_ecm), color = "blue", size = 1) +
geom_text(aes(label = Species), vjust = -0.5, hjust = 0.5, size =3) +
scale_x_continuous(expand = expansion(mult = 0.1)) +
labs(
title = "PGLS: LQ ~ ECM only",
x = "Predicted LQ",
y = "LQ"
) +
theme_minimal() + coord_cartesian(clip = "off")
